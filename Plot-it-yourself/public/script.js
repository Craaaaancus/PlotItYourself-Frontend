(()=>{"use strict";class t{getComponent(){const t=document.createElement("div");return t.className="container buttons-container",t.innerHTML=`\n      <div class="tooltip">\n        ${this.getRewindButton(!0).outerHTML}\n        <span class="tooltip-text">Перемотать в начало</span>\n      </div>\n      <div class="tooltip">\n        ${this.getPrevButton(!0).outerHTML}\n        <span class="tooltip-text">Шаг назад</span>\n      </div>\n      <div class="tooltip">\n        ${this.getPlayButton().outerHTML}\n        <span \n          id="tooltip-text-restart"\n          class="tooltip-text"\n          style="display: none">\n          Рестарт\n        </span>\n        <span \n          id="tooltip-text-play"\n          class="tooltip-text"\n          style="display: inline-block">\n          Запустить\n        </span>\n        <span \n          id="tooltip-text-pause"\n          class="tooltip-text"\n          style="display: none">\n          Пауза\n        </span>\n      </div>\n      <div class="tooltip">\n        ${this.getNextButton().outerHTML}\n        <span class="tooltip-text">Шаг вперед</span>\n      </div>\n      <div class="tooltip">\n        ${this.getForwardButton().outerHTML}\n        <span class="tooltip-text">Перемотать в конец</span>\n      </div>\n    `,t}getPrevButton(t=!1){const e=document.createElement("button");return e.id="prev",e.className="btn",t&&(e.disabled=!0),e.innerHTML='\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M19,5V19H16V5M14,5V19L3,12"></path>\n      </svg>\n    ',e}getNextButton(t=!1){const e=document.createElement("button");return e.id="next",e.className="btn",t&&(e.disabled=!0),e.innerHTML='\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M5,5V19H8V5M10,5V19L21,12"></path>\n      </svg>\n    ',e}getRewindButton(t=!1){const e=document.createElement("button");return e.id="rewind",e.className="btn",t&&(e.disabled=!0),e.innerHTML='\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M17,5H14V19H17V5M12,5L1,12L12,19V5M22,5H19V19H22V5Z"></path>\n      </svg>\n    ',e}getForwardButton(t=!1){const e=document.createElement("button");return e.id="forward",e.className="btn",t&&(e.disabled=!0),e.innerHTML='\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M7,5H10V19H7V5M12,5L23,12L12,19V5M2,5H5V19H2V5Z"></path>\n      </svg>\n    ',e}getPlayButton(){const t=document.createElement("button");return t.id="play",t.className="btn restart",t.innerHTML='\n      <span id="icon-restart" style="display:none;">\n        <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n          <path fill="currentColor" d="M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z"></path>\n        </svg>\n      </span>\n      <span id="icon-play" style="display:inline-block;">\n        <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n          <path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z"></path>\n        </svg>\n      </span>\n      <span id="icon-pause" style="display:none;">\n        <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n          <path fill="currentColor" d="M14,19H18V5H14M6,19H10V5H6V19Z"></path>\n        </svg>\n      </span>\n    ',t}}class e{constructor(t){this.playerStr=1===t?"player":2===t?"opponent":"",this.component=this.getComponent(t)}getComponent(){if(this.component)return this.component;const t=document.createElement("div");return t.className="player-container",t.id=`${this.playerStr}Container`,t.innerHTML=`\n      <h4 id="${this.playerStr}Name" class="player-header"></h4>\n      <div id="${this.playerStr}Text" class="player-text"></div>\n      <div class="game-info" id="${this.playerStr}Info">\n      </div>\n    `,t}}class n{constructor(){}setPlayer(t){1===t&&(this.playerText=document.querySelector("#playerText"),this.playerName=document.querySelector("#playerName"),this.playerName.textContent=window.gameConfig.playerName,this.playerInfo=document.querySelector("#playerInfo"),this.playerInfo.innerHTML=`\n        Игрок \n        <b>\n          ${window.gameConfig.playerName}\n          <span class="message"></span>\n        </b> \n      `),2===t&&(this.playerText=document.querySelector("#opponentText"),this.playerName=document.querySelector("#opponentName"),this.playerName.textContent=window.gameConfig.opponentName,this.playerInfo=document.querySelector("#opponentInfo"),this.playerInfo.innerHTML=`\n        Игрок \n        <b>\n          ${window.gameConfig.opponentName}\n          <span class="message"></span>\n        </b> \n      `),this.playerText.className="player-text"}setStep(t,e){switch(this.setPlayer(t),this.getStepData(t,e).typeMove){case"L":this.lengthStep(t,e);break;case"G":this.getCharStep(t,e);break;case"S":this.setCharStep(t,e);break;case"D":this.deleteCharsStep(t,e);break;case"F":this.FindStrStep(t,e);break;case"I":this.InsCharStep(t,e)}}getStepData(t,e){return 1===t?window.gameConfig.playerSteps[e]:2===t?window.gameConfig.opponentSteps[e]:void 0}initTextStep(t){let e=window.gameConfig?.source.split("");this.setPlayer(t);for(let t=0;t<e.length;t++){const n=`\n        <div class="text-letter">${e[t]}</div>\n      `;this.playerText.insertAdjacentHTML("beforeend",n)}let n=this.playerInfo.querySelector(".message");n.textContent="начал задачу",n.classList.add("orange")}lengthStep(t,e){this.setPlayer(t);const n=this.getStepData(t,e);if(!n)return;const s=`\n      получил длину текста в ${n.text.length} символов\n    `;this.playerText.classList.add("orange");let o=this.playerInfo.querySelector(".message");o.textContent=s,o.classList.add("orange")}}class s{constructor(){this.player=1,this.opponent=2,this.stepsCount=window.gameConfig.stepsCount,this.stepController=new n}handleEvent(t){if("click"===t.type){const e=t.target.closest("#rewind"),n=t.target.closest("#prev"),s=t.target.closest("#play"),o=t.target.closest("#next"),a=t.target.closest("#forward");e&&this.rewind(),n&&this.prev(),s&&this.play(),o&&this.next(),a&&this.forward()}}play(){let t=1,e=1,n=setInterval((()=>{this.stepController.lengthStep(this.player,t++),this.stepController.lengthStep(this.opponent,e++),t+e>this.stepsCount+2&&(clearInterval(n),alert("f"))}),500)}}class o{constructor(){this.appButtons=new t,this.player=1,this.opponent=2,this.playerTextBlock=new e(this.player),this.opponentTextBlock=new e(this.opponent),this.stepController=new n,this.ButtonHandler=new s,this.component=this.getComponent()}start(){this.stepController.initTextStep(this.player),this.stepController.initTextStep(this.opponent),this.component.querySelector(".buttons-container").addEventListener("click",this.ButtonHandler)}getComponent(){if(this.component)return this.component;const t=document.createElement("main");return t.className="main",t.innerHTML=`\n      ${this.appButtons.getComponent().outerHTML}\n      <div class="container">\n        ${this.playerTextBlock.getComponent().outerHTML}\n        ${this.opponentTextBlock.getComponent().outerHTML}\n      </div>\n    `,t}}!async function(){window.gameConfig=await async function(t=1){const e={};try{const n=await fetch(`./outputs/output${t}.txt`);return function(t,e){let n=1;const s=()=>t[n++];let o=s().split(/ +/);e.playerId=parseInt(o[0]),e.opponentId=parseInt(o[1]);let a=s().split(/ +/);e.playerKey=parseInt(a[0]),e.opponentKey=parseInt(a[1]),e.playerName=s().trim(),e.opponentName=s().trim(),e.maxSteps=parseInt(s());let i=s().split(/ +/);e.sourceLength=parseInt(i[0]),e.targetLength=parseInt(i[1]),e.source=s(),e.target=s(),e.stepsCount=parseInt(s());let r=0;for(e.playerSteps=[],e.opponentSteps=[];r<=e.stepsCount+2;){let t=s().split(/ +/);if(!t.length)break;let n=s(),o={};o.step=parseInt(t[1]),o.typeMove=t[2],o.moveResult=t[3],o.text=n,1===parseInt(t[0])&&(e.playerSteps[o.step]=o),2===parseInt(t[0])&&(e.opponentSteps[o.step]=o),r++}}((await n.text()).split("\n"),e),e}catch(t){console.log(t)}}(2),console.log(window.gameConfig);const t=new o;document.body.append(t.getComponent()),t.start()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,