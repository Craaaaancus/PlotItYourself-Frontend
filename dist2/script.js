(()=>{"use strict";class t{constructor(){this.playerContainer=document.querySelector("#playerContainer"),this.opponentContainer=document.querySelector("#opponentContainer"),this.playerName=document.querySelector("#playerName"),this.opponentName=document.querySelector("#opponentName"),this.playerInfo=document.querySelector("#playerInfo"),this.opponentInfo=document.querySelector("#opponentInfo"),this.playerText=document.querySelector("#playerText"),this.opponentText=document.querySelector("#opponentText")}setPlayerText(t,e){if(1===t){const t=e.split("");this.playerText.innerHTML="";for(let e=0;e<t.length;e++){let n=`<div class="text-letter">${t[e]}</div>`;this.playerText.insertAdjacentHTML("beforeend",n)}}if(2===t){const t=e.split("");this.opponentText.innerHTML="";for(let e=0;e<t.length;e++){let n=`<div class="text-letter">${t[e]}</div>`;this.opponentText.insertAdjacentHTML("beforeend",n)}}}setPlayerNames(t,e){this.playerName.textContent=t,this.playerName=t,this.opponentName.textContent=e,this.opponentName=e}setPlayerStepInfo(t,e=0,n="",s=""){1===t&&(this.playerInfo.innerHTML=`\n        <b>Ход ${e}:</b> игрок \n        <b>\n          ${this.playerName.textContent} <br>\n          <span class="message" data-color="${s}">${n}</span>\n        </b>\n      `),2===t&&(this.opponentInfo.innerHTML=`\n        <b>Ход ${e}:</b> оппонент \n        <b>\n          ${this.opponentName.textContent} <br>\n          <span class="message" data-color="${s}">${n}</span>\n        </b>\n      `)}highlightPlayerText(t,e=""){1===t&&(this.playerText.dataset.color=e),2===t&&(this.opponentText.dataset.color=e)}highlightPlayerLetters(t,e,n,s=1){let i=n;for(let n=0;n<s;n++){const n=`.text-letter:nth-child(${i+1})`;let s;1===t&&(s=this.playerText.querySelector(n)),2===t&&(s=this.opponentText.querySelector(n)),s&&setTimeout((()=>s.dataset.color=e),5),i++}}}class e{constructor(){this.renderer=new t}setStep(t,e){const n=this.getStepData(t,e);if(n)switch(n.typeMove){case"N":this.startStep(t,e);break;case"L":this.lengthStep(t,e);break;case"G":"O"===n.moveResult?this.outOfBoundsStep(t,e):this.getCharStep(t,e);break;case"S":"O"===n.moveResult?this.outOfBoundsStep(t,e):this.setCharStep(t,e);break;case"D":"O"===n.moveResult?this.outOfBoundsStep(t,e):this.deleteCharsStep(t,e);break;case"F":"F"===n.moveResult?this.notFoundStep(t,e):this.findStrStep(t,e);break;case"I":"O"===n.moveResult?this.outOfBoundsStep(t,e):this.insCharStep(t,e)}}getStepData(t,e){return 1===t?window.gameConfig.playerSteps[e]:2===t?window.gameConfig.opponentSteps[e]:void 0}startStep(t,e){const n=this.getStepData(t,e);n&&(this.renderer.setPlayerText(t,n.text),this.renderer.setPlayerStepInfo(t,e,"начал задачу","orange"),this.renderer.highlightPlayerText(t))}lengthStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=`\n      получил длину текста в ${n.text.length} символов\n    `,i="orange";this.renderer.setPlayerText(t,n.text),this.renderer.setPlayerStepInfo(t,e,s,i),this.renderer.highlightPlayerText(t,i)}getCharStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text,i=n.position,o=`\n      получил символ '${s[i]}' на позиции ${i}\n    `,r="blue";this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,o,r),this.renderer.highlightPlayerText(t),this.renderer.highlightPlayerLetters(t,r,i)}setCharStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text,i=n.position,o=`\n      установил символ '${s[i]}' на позицию ${i}\n    `,r="green";this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,o,r),this.renderer.highlightPlayerText(t),this.renderer.highlightPlayerLetters(t,r,i)}deleteCharsStep(t,e){const n=this.getStepData(t,e-1),s=this.getStepData(t,e);if(!n||!s)return;const i=n.text,o=s.position,r=i.length-s.text.length,a=`\n      удалил ${r} символов на позиции ${o}\n    `;this.renderer.setPlayerText(t,i),this.renderer.setPlayerStepInfo(t,e,a,"red"),this.renderer.highlightPlayerText(t),this.renderer.highlightPlayerLetters(t,"red",o,r)}findStrStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text,i=n.position,o=`\n      обнаружил искомую строку на позиции ${i}\n    `,r="blue";this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,o,r),this.renderer.highlightPlayerText(t),this.renderer.highlightPlayerLetters(t,r,i)}insCharStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text,i=n.position,o=`\n      вставил символ '${s[i]}' на позицию ${i}\n    `,r="green";this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,o,r),this.renderer.highlightPlayerText(t),this.renderer.highlightPlayerLetters(t,r,i)}outOfBoundsStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text;this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,"\n      вышел за пределы строки\n    ","red"),this.renderer.highlightPlayerText(t,"red")}notFoundStep(t,e){const n=this.getStepData(t,e);if(!n)return;const s=n.text;this.renderer.setPlayerText(t,s),this.renderer.setPlayerStepInfo(t,e,"\n      не нашел искомый элемент\n    ","red"),this.renderer.highlightPlayerText(t,"red")}}class n{constructor(t){this.winners=t||window.gameConfig.winners,this.component=this.getComponent()}getWinnerHTML(){const t=window.gameConfig.playerId,e=window.gameConfig.opponentId,n=window.gameConfig.playerName,s=window.gameConfig.opponentName;let i="",o="";this.winners[0]===t?(i=n,o=s):this.winners[0]===e&&(i=s,o=n);const r=`\n      <p><span class="winner">Победитель: </span><b>${i}</b></p>\n      <p><span class="loser">Проигравший: </span><b>${o}</b></p>\n    `,a=`\n      <p class="winner">\n        Игроки <b>${n}</b> и <b>${s}</b> сыграли вничью\n      </p>\n    `,p=`\n      <p class="loser">\n        Игроки <b>${n}</b> и <b>${s}</b> потерпели поражение\n      </p>\n    `;switch(this.winners[2]){case 0:return r;case 1:return a;case 2:return p;default:return""}}open(){const t=document.querySelector("#winnerModal");t&&(t.style.display="block");const e=document.querySelector("#winnerModalCloseBtn");e&&(e.onclick=()=>this.close())}close(){const t=document.querySelector("#winnerModal");t&&(t.style.display="none")}getComponent(){if(this.component)return this.component;const t=document.createElement("div");return t.id="winnerModal",t.className="winner-modal",t.innerHTML=`\n      <div id="winnerModalContent" class="winner-modal-content">\n        <span id="winnerModalCloseBtn" class="close-btn">x</span>\n        <div id="winnerModalHeading">\n          <h3 class="winner-heading">Результат игры</h3>\n          ${this.getWinnerHTML()}\n        </div>\n      </div>\n    `,t}}class s{constructor(){this.rewindButton=document.querySelector("#rewind"),this.prevButton=document.querySelector("#prev"),this.playButton=document.querySelector("#play"),this.nextButton=document.querySelector("#next"),this.forwardButton=document.querySelector("#forward"),this.tooltipPlay=document.querySelector("#tooltipTextPlay"),this.tooltipPause=document.querySelector("#tooltipTextPause"),this.tooltipRestart=document.querySelector("#tooltipTextRestart"),this.iconPlay=document.querySelector("#iconPlay"),this.iconPause=document.querySelector("#iconPause"),this.iconRestart=document.querySelector("#iconRestart")}setButtonsDisability(t="all",e=!0){switch(t){case"left":this.rewindButton.disabled=e,this.prevButton.disabled=e;break;case"right":this.nextButton.disabled=e,this.forwardButton.disabled=e;break;case"all":this.rewindButton.disabled=e,this.prevButton.disabled=e,this.nextButton.disabled=e,this.forwardButton.disabled=e}}setPlayButtonIcon(t="play"){let e="none",n="none",s="none";const i="none",o="inline-block";switch(t){case"play":e=o,n=i,s=i;break;case"pause":e=i,n=o,s=i;break;case"restart":e=i,n=i,s=o}this.tooltipPlay.style.display=e,this.tooltipPause.style.display=n,this.tooltipRestart.style.display=s,this.iconPlay.style.display=e,this.iconPause.style.display=n,this.iconRestart.style.display=s,this.playButton.dataset.status=t}}class i{constructor(){this.player=1,this.opponent=2,this.playerStep=-1,this.opponentStep=-1,this.timerDelay=1e3,this.timerID=0,this.stepsCount=window.gameConfig.stepsCount,this.lastPlayerStep=window.gameConfig.playerSteps.length-1,this.lastOpponentStep=window.gameConfig.opponentSteps.length-1,this.maxNumberOfSteps=window.gameConfig.maxSteps,this.lastPlayerStep>=this.lastOpponentStep?this.maxSteps=this.lastPlayerStep:this.maxSteps=this.lastOpponentStep,this.stepController=new e,this.winnerModal=new n,this.visualizer=new s}handleEvent(t){if("click"===t.type){const e=t.target.closest("#rewind"),n=t.target.closest("#prev"),s=t.target.closest("#play"),i=t.target.closest("#next"),o=t.target.closest("#forward");if(e&&!e.disabled)this.rewind();else if(n&&!n.disabled)this.prev();else if(s)switch(s.dataset.status){case"play":this.play(this.playerStep,this.opponentStep);break;case"pause":this.pause();break;case"restart":this.restart()}else i&&!i.disabled?this.next():o&&!o.disabled&&this.forward()}}setButtonsState(){0===this.playerStep&&0===this.opponentStep?this.visualizer.setButtonsDisability("left",!0):this.visualizer.setButtonsDisability("left",!1),this.playerStep===this.lastPlayerStep&&this.opponentStep===this.lastOpponentStep?this.visualizer.setButtonsDisability("right",!0):this.visualizer.setButtonsDisability("right",!1)}setGameStep(){this.stepController.setStep(this.player,this.playerStep),this.stepController.setStep(this.opponent,this.opponentStep),this.setGameFinishVisibility()}setGameFinishVisibility(){const t="Превышено максимальное количество ходов",e="Задача завершена",n=document.querySelector("#playerFinish");n&&this.playerStep===this.lastPlayerStep?(n.style.visibility="visible",this.lastPlayerStep>this.maxNumberOfSteps?n.textContent=t:n.textContent=e):n.style.visibility="hidden";const s=document.querySelector("#opponentFinish");s&&this.opponentStep===this.lastOpponentStep?(s.style.visibility="visible",this.lastOpponentStep>this.maxNumberOfSteps?s.textContent=t:s.textContent=e):s.style.visibility="hidden"}isFinished(){return this.playerStep+this.opponentStep>=this.stepsCount}play(t=0,e=0){this.visualizer.setButtonsDisability("all",!0),this.visualizer.setPlayButtonIcon("pause"),this.playerStep=t>0?t:0,this.opponentStep=e>0?e:0,this.setGameStep(),this.intervalID=setInterval((()=>{this.isFinished()&&(clearInterval(this.intervalID),this.intervalID=0,this.visualizer.setPlayButtonIcon("restart"),this.setButtonsState(),this.winnerModal.open()),this.playerStep<this.lastPlayerStep&&(this.playerStep++,this.stepController.setStep(this.player,this.playerStep)),this.opponentStep<this.lastOpponentStep&&(this.opponentStep++,this.stepController.setStep(this.opponent,this.opponentStep)),this.setGameFinishVisibility()}),this.timerDelay)}pause(){this.intervalID&&(clearInterval(this.intervalID),this.intervalID=0),this.visualizer.setPlayButtonIcon("play"),this.setButtonsState()}restart(){this.playerStep=0,this.opponentStep=0,this.play()}rewind(){this.playerStep=0,this.opponentStep=0,this.setButtonsState(),this.setGameStep()}prev(){let t=!1,e=!1;this.playerStep>0&&this.playerStep>=this.opponentStep&&(t=!0),this.opponentStep>0&&this.opponentStep>=this.playerStep&&(e=!0),t&&this.playerStep--,e&&this.opponentStep--,this.setButtonsState(),this.setGameStep()}next(){this.playerStep<this.lastPlayerStep&&this.playerStep++,this.opponentStep<this.lastOpponentStep&&this.opponentStep++,this.setButtonsState(),this.setGameStep(),this.isFinished()&&(this.visualizer.setPlayButtonIcon("restart"),this.winnerModal.open())}forward(){this.playerStep=this.lastPlayerStep,this.opponentStep=this.lastOpponentStep,this.visualizer.setPlayButtonIcon("restart"),this.setButtonsState(),this.setGameStep(),this.winnerModal.open()}}class o{constructor(t){this.iconType=t}getIconHTML(){switch(this.iconType){case"prev":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M19,5V19H16V5M14,5V19L3,12"></path>\n      </svg>\n    ';case"next":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M5,5V19H8V5M10,5V19L21,12"></path>\n      </svg>\n    ';case"rewind":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M17,5H14V19H17V5M12,5L1,12L12,19V5M22,5H19V19H22V5Z"></path>\n      </svg>\n    ';case"forward":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M7,5H10V19H7V5M12,5L23,12L12,19V5M2,5H5V19H2V5Z"></path>\n      </svg>\n    ';case"play":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z"></path>\n      </svg>\n    ';case"restart":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z"></path>\n      </svg>\n    ';case"pause":return'\n      <svg style="width:24px;height:24px;" viewBox="0 0 24 24">\n        <path fill="currentColor" d="M14,19H18V5H14M6,19H10V5H6V19Z"></path>\n      </svg>\n    '}}}class r{getComponent(){const t=document.createElement("div");return t.className="container buttons-container",t.innerHTML=`\n      <div class="tooltip">\n        ${this.getRewindButton(!0).outerHTML}\n        <span class="tooltip-text">Перемотать в начало</span>\n      </div>\n      <div class="tooltip">\n        ${this.getPrevButton(!0).outerHTML}\n        <span class="tooltip-text">Шаг назад</span>\n      </div>\n      <div class="tooltip">\n        ${this.getPlayButton().outerHTML}\n        <span \n          id="tooltipTextRestart"\n          class="tooltip-text"\n          style="display: none">\n          Рестарт\n        </span>\n        <span \n          id="tooltipTextPlay"\n          class="tooltip-text"\n          style="display: inline-block">\n          Запустить\n        </span>\n        <span \n          id="tooltipTextPause"\n          class="tooltip-text"\n          style="display: none">\n          Пауза\n        </span>\n      </div>\n      <div class="tooltip">\n        ${this.getNextButton().outerHTML}\n        <span class="tooltip-text">Шаг вперед</span>\n      </div>\n      <div class="tooltip">\n        ${this.getForwardButton().outerHTML}\n        <span class="tooltip-text">Перемотать в конец</span>\n      </div>\n    `,t}getPrevButton(t=!1){const e=document.createElement("button");return e.id="prev",e.className="btn",t&&(e.disabled=!0),e.innerHTML=new o("prev").getIconHTML(),e}getNextButton(t=!1){const e=document.createElement("button");return e.id="next",e.className="btn",t&&(e.disabled=!0),e.innerHTML=new o("next").getIconHTML(),e}getRewindButton(t=!1){const e=document.createElement("button");return e.id="rewind",e.className="btn",t&&(e.disabled=!0),e.innerHTML=new o("rewind").getIconHTML(),e}getForwardButton(t=!1){const e=document.createElement("button");return e.id="forward",e.className="btn",t&&(e.disabled=!0),e.innerHTML=new o("forward").getIconHTML(),e}getPlayButton(){const t=document.createElement("button");return t.id="play",t.className="btn",t.dataset.status="play",t.innerHTML=`\n      <span id="iconRestart" style="display:none;">\n        ${new o("restart").getIconHTML()}\n      </span>\n      <span id="iconPlay" style="display:inline-block;">\n        ${new o("play").getIconHTML()}\n      </span>\n      <span id="iconPause" style="display:none;">\n        ${new o("pause").getIconHTML()}\n      </span>\n    `,t}}class a{constructor(t){this.playerStr=1===t?"player":2===t?"opponent":"",this.component=this.getComponent(t)}getComponent(){if(this.component)return this.component;const t=document.createElement("div");return t.className="player-container",t.id=`${this.playerStr}Container`,t.innerHTML=`\n      <h4 id="${this.playerStr}Name" class="player-header"></h4>\n      <div id="${this.playerStr}Text" class="player-text"></div>\n      <div class="game-info" id="${this.playerStr}Info"></div>\n      <div class="game-finish" id="${this.playerStr}Finish"></div>\n    `,t}}class p{constructor(){this.component=this.getComponent(),this.numberOfTask=window.gameConfig.numberOfTask}getComponent(){const t=document.createElement("div");switch(t.id="taskInfo",t.className="task-info",this.numberOfTask){case 1:t.innerHTML="\n      <b>Задание 1: </b> удалить лишние и вставить необходимые пробелы\n    ";break;case 2:t.innerHTML="\n      <b>Задание 2: </b> заменить все слова “the” на слово “a” и слова\n      “The” на слово “A”\n    ";break;case 3:t.innerHTML="\n      <b>Задание 3: </b> удалить повторные вхождения в текст одних \n      и тех же слов\n    ";break;default:t.innerHTML=""}return t}}class l{constructor(){this.buttonsContainer=new r,this.player=1,this.opponent=2,this.playerTextBlock=new a(this.player),this.opponentTextBlock=new a(this.opponent),this.taskInfo=new p,this.winnerModal=new n,this.component=this.getComponent()}start(){document.body.append(this.component),this.component.querySelector(".buttons-container").addEventListener("click",new i);const e=new t;e.setPlayerNames(window.gameConfig.playerName,window.gameConfig.opponentName),e.setPlayerText(this.player,window.gameConfig.source),e.setPlayerText(this.opponent,window.gameConfig.source)}getComponent(){if(this.component)return this.component;const t=document.createElement("main");return t.className="main",t.innerHTML=`\n      ${this.buttonsContainer.getComponent().outerHTML}\n      <div class="container">\n        ${this.taskInfo.getComponent().outerHTML}\n      </div>\n      <div class="container">\n        ${this.playerTextBlock.getComponent().outerHTML}\n        ${this.opponentTextBlock.getComponent().outerHTML}\n      </div>\n      ${this.winnerModal.getComponent().outerHTML}\n    `,t}}!async function(){window.gameConfig=await async function(t=1){const e={};try{const n=await fetch(`./outputs/output${t}.txt`);return function(t,e){let n=1;const s=()=>t[n++];let i=s().split(/ +/);e.winners=[],e.winners[0]=parseInt(i[0]),e.winners[1]=parseInt(i[1]),e.winners[2]=parseInt(i[2]);let o=s().split(/ +/);e.playerId=parseInt(o[0]),e.opponentId=parseInt(o[1]);let r=s().split(/ +/);e.playerKey=parseInt(r[0]),e.opponentKey=parseInt(r[1]),e.playerName=s().trim(),e.opponentName=s().trim(),e.maxSteps=parseInt(s());let a=s().split(/ +/);e.sourceLength=parseInt(a[0]),e.targetLength=parseInt(a[1]),e.numberOfTask=parseInt(s()),e.source=s(),e.target=s(),e.stepsCount=parseInt(s());let p=0;for(e.playerSteps=[],e.opponentSteps=[];p<=e.stepsCount+2;){let t=s();if(!t)break;let n=t.split(/ +/);if(!n.length)break;let i=s(),o={};o.step=parseInt(n[1]),o.typeMove=n[2],o.moveResult=n[3],o.position=parseInt(n[4]),o.text=i,1===parseInt(n[0])&&(e.playerSteps[o.step]=o),2===parseInt(n[0])&&(e.opponentSteps[o.step]=o),p++}}((await n.text()).split("\n"),e),e}catch(t){console.log(t)}}(2),console.log(window.gameConfig),(new l).start()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,